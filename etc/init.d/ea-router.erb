#!/bin/sh
### BEGIN INIT INFO
# Provides:          ea-router
# Required-Start:    $network $local_fs
# Required-Stop:     $network $local_fs
# Should-Start:      postgresql
# Should-Stop:       postgresql
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start and stop the Echoes Alert ROUTER
# Description:       The Echoes Alert ROUTER
### END INIT INFO

#
# Copyright Echoes Technologies SAS 2014
#
# Author: Florent Poinsaut <florent.poinsaut@echoes-tech.com>
# This program is free software; you can redistribute it and/or modify it
# under the terms of version 2.1 of the GNU Lesser General Public License
# as published by the Free Software Foundation.
# 
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="ECHOES Alert Router"
NAME=ea-router
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

if [ -n $EA_ROUTER_SERVERNAME ]
then
  EA_ROUTER_SERVERNAME_OPT="--servername $EA_ROUTER_SERVERNAME"
fi
EA_ROUTER_ACCESS_LOG_OPT='--accesslog '${EA_ROUTER_ACCESS_LOG:-'/var/log/echoes-alert/router_access.log'}
EA_ROUTER_IFACE_OPT='--http-address '${EA_ROUTER_IFACE:-'0.0.0.0'}
EA_ROUTER_PORT_OPT='--http-port '${EA_ROUTER_PORT:-'80'}
if [ -n $EA_ROUTER_HTTPS_IFACE ]
then
  EA_ROUTER_HTTPS_IFACE_OPT="--https-address $EA_ROUTER_HTTPS_IFACE"
fi
if [ -n $EA_ROUTER_HTTPS_PORT ]
then
  EA_ROUTER_HTTPS_PORT_OPT="--https-port $EA_ROUTER_HTTPS_PORT"
fi
if [ -n $EA_ROUTER_SSL_CERT ]
then
  EA_ROUTER_SSL_CERT_OPT="--ssl-certificate $EA_ROUTER_SSL_CERT"
fi
if [ -n $EA_ROUTER_SSL_PRIV_KEY ]
then
  EA_ROUTER_SSL_PRIV_KEY_OPT="--ssl-private-key $EA_ROUTER_SSL_PRIV_KEY"
fi

DAEMON=<%= install_dir %>/bin/$NAME
DAEMON_ARGS="$EA_ROUTER_SERVERNAME_OPT $EA_ROUTER_ACCESS_LOG_OPT --docroot . \
            $EA_ROUTER_IFACE_OPT $EA_ROUTER_PORT_OPT \
            $EA_ROUTER_HTTPS_IFACE_OPT $EA_ROUTER_HTTPS_PORT_OPT \
            $EA_ROUTER_SSL_CERT_OPT  $EA_ROUTER_SSL_PRIV_KEY_OPT --ssl-tmp-dh /etc/ssl/dh1024.pem \
            -p $PIDFILE"

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh
VERBOSE=yes

# Define LSB log_* functions.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet -d <%= install_dir %> --pidfile $PIDFILE -b --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet -d <%= install_dir %> --pidfile $PIDFILE -b --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$NAME"
    do_start
    case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
  ;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac
